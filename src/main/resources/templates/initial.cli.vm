connect

#if ($Extensions.size() > 0 )

#foreach( $Extension in $Extensions)
batch
/extension=$Extension.Module:add
run-batch
batch
/subsystem=$Extension.SubSystem:add

#foreach($Property in $Extension.Properties)
#if (!$Property.Value)
/subsystem=$Extension.SubSystem/property=$Property.Name:add
#else
/subsystem=$Extension.SubSystem/property=$Property.Name:add(value="$Property.Value")
#end
#end

#foreach($Capability in $Extension.Capabilities)
#if (!$Capability.Value)
/subsystem=$Extension.SubSystem/capability=$Capability.Name:add
#else
/subsystem=$Extension.SubSystem/capability=$Capability.Name:add($Capability.ValueName=$Capability.Value)
#end
#end
run-batch
#end
#end


batch
#dummy command so batch mode not empty
/:read-attribute(name=product-version)
#foreach( $property in $SystemProperties)
/system-property=$property.Name:add(value="$property.Value")
#end

#foreach($driver in $Drivers)
#if ( $driver.Distributed == "Y" )
/subsystem=datasources/jdbc-driver=$driver.Name:add(driver-name=$driver.Name,driver-module-name=$driver.ModuleName,driver-xa-datasource-class-name=$driver.ClassName)
#else
/subsystem=datasources/jdbc-driver=$driver.Name:add(driver-name=$driver.Name,driver-module-name=$driver.ModuleName,driver-datasource-class-name=$driver.ClassName)
#end
#end


#foreach( $ds in $Datasources)
/subsystem=security/security-domain=EncryptedPassword$ds.Name:add()
/subsystem=security/security-domain=EncryptedPassword$ds.Name/authentication=classic:add(login-modules=[{"code" => "SecureIdentity", "flag" => "required","module-options" => {"username" =>"$ds.UserName", "password" => "$ds.Password"}}])
#if ( $ds.Distributed == "Y" )
xa-data-source add --name=$ds.Name --jndi-name=$ds.JndiName --security-domain=EncryptedPassword$ds.Name --driver-name=$ds.Driver --xa-datasource-class=$ds.DatasourceClass
/subsystem=datasources/xa-data-source=$ds.Name/xa-datasource-properties=URL:add(value="$ds.URL")
xa-data-source enable --name=$ds.Name
#else
data-source add --name=$ds.Name --jndi-name=$ds.JndiName --security-domain=EncryptedPassword$ds.Name --driver-name=$ds.Driver --datasource-class=$ds.DatasourceClass --connection-url="$ds.URL"
data-source enable --name=$ds.Name
#end
#foreach( $dp in $ds.Properties)
#if ( $ds.Distributed == "Y" )
/subsystem=datasources/xa-data-source=$ds.Name:write-attribute(name="$dp.Name",value="$dp.Value")
#else
/subsystem=datasources/data-source=$ds.Name:write-attribute(name="$dp.Name",value="$dp.Value")
#end
#end
#end


#foreach( $handler in $Handlers)
/subsystem=logging/${handler.Type}=${handler.Name}:add(level=${handler.LogLevel}, formatter="${handler.Formatter}", suffix="${handler.Suffix}", append=true, file={"relative-to"=>"jboss.server.log.dir","path"=>"${handler.Path}"})
#end

#foreach( $logger in $Loggers)
/subsystem=logging/logger=${logger.Name}:add(level=${logger.LogLevel}, handlers=["${logger.LogHandler.Name}"])
#if ( $logger.Parent == "Y" )
/subsystem=logging/logger=${logger.Name}:write-attribute(name="use-parent-handlers", value="true")
#else
/subsystem=logging/logger=${logger.Name}:write-attribute(name="use-parent-handlers", value="false")
#end
#end

#foreach($ms in $MailSessions)
/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=$ms.SmtpName:add(host="$ms.SmtpServer",port="$ms.SmtpPort")
/subsystem=mail/mail-session="$ms.JndiName":add(name=$ms.Name,jndi-name=$ms.JndiName,from="$ms.FromAddress",debug=$ms.DebugSwitch)
/subsystem=mail/mail-session="$ms.JndiName"/server=smtp:add(outbound-socket-binding-ref=$ms.SmtpName,ssl=false,tls=$ms.SmtpSSL,username="$ms.SmtpUserName",password="$ms.SmtpPassword")
#end

#if ( $QueueFactories.size() > 0 )

# new copy rar to deployment directory 
# deploy /opt/mqm/java/lib/jca/wmq.jmsra.rar

/subsystem=ee:write-attribute(name=global-modules,value=[{name="com.ibm",slot="main"}])

/subsystem=ee:write-attribute(name=spec-descriptor-property-replacement,value=true)
/subsystem=ee:write-attribute(name=jboss-descriptor-property-replacement,value=true)
/subsystem=ejb3:write-attribute(name="default-resource-adapter-name", value="wmq-ra")
/subsystem=ejb3:write-attribute(name="default-mdb-instance-pool", value="mdb-strict-max-pool")  

#foreach($qf in $QueueFactories)

/subsystem=resource-adapters/resource-adapter=wmq-ra/:add(archive=wmq.jmsra.rar,transaction-support=XATransaction)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/:add(class-name=com.ibm.mq.connector.outbound.ManagedConnectionFactoryImpl,jndi-name=$qf.JndiName,use-java-context=false,enabled=true,pool-use-strict-min=false,security-application=true,background-validation=false,use-fast-fail=false,use-ccm=true)

/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=port/:add(value=$qf.Port)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=hostName/:add(value=$qf.HostName)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=username/:add(value=$qf.UserName)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=channel/:add(value=$qf.Channel)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=transportType/:add(value=$qf.TransportType)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=queueManager/:add(value=$qf.QueueManager)
/subsystem=resource-adapters/resource-adapter=wmq-ra/connection-definitions="$qf.PoolName"/config-properties=sslCipherSuite/:add(value=$qf.SslCipherSuite)

#foreach( $ao in $qf.AdminObjects)
/subsystem=resource-adapters/resource-adapter=wmq-ra/admin-objects=$ao.Name:add(jndi-name="$ao.JndiName",class-name="$ao.ClassName",enabled="true")
/subsystem=resource-adapters/resource-adapter=wmq-ra/admin-objects=$ao.Name/config-properties=baseQueueName:add(value=$ao.ConfigProperty)
#end
#end
#end

#if ( $OutboundConnections.size() > 0 )
/core-service=management/security-realm=ejb-security-realm:add()
/core-service=management/security-realm=ejb-security-realm/server-identity=secret:add(value="MXBhc3N3b3JkIQ==")
#foreach($oc in $OutboundConnections)
/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=remote-ejb-${oc.Alias}:add(host=${oc.Server}, port=${oc.Port})
/subsystem=remoting/remote-outbound-connection=remote-ejb-connection-${oc.Alias}:add(outbound-socket-binding-ref=remote-ejb-${oc.Alias}, security-realm=ejb-security-realm, username=RemotingUser)
/subsystem=remoting/remote-outbound-connection=remote-ejb-connection-${oc.Alias}/property=SASL_POLICY_NOANONYMOUS:add(value=false)
/subsystem=remoting/remote-outbound-connection=remote-ejb-connection-${oc.Alias}/property=SSL_ENABLED:add(value=true)

#end
#end

run-batch

#if( $CustomCli.Cli )
batch
#dummy cmd for batch mode so batch is never empty
:read-attribute(name=product-version)
$CustomCli.Cli

run-batch
#end